<?php

namespace IATBundle\Entity;

/**
 * DealRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DealRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get all active deals by dealLink
	 *
	 * @param : $dealLink
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealsByDealLink($dealLink)
	{
		$queryBuilder = $this->createQueryBuilder('d')
			->select('d')
			->where('d.dealLink = :dealLink')
			->setParameter(':dealLink', $dealLink)
			->andWhere('d.status = :status')
			->setParameter(':status', '1')
			->orderBy('d.departureMonths');
		
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deal title by dealLink
	 *
	 * @param : $dealLink
	 *
	 * @return: dealTitle
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealTitleByDealLink($dealLink)
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d.dealTitle')
		->where('d.dealLink = :dealLink')
		->setParameter(':dealLink', $dealLink)
		->setMaxResults(1);
	
		return $queryBuilder->getQuery()->getOneOrNullResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deals by dealLink
	 *
	 * @param : $dealLink
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getAllDealsByDealLink($dealLink)
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d')
		->where('d.dealLink = :dealLink')
		->setParameter(':dealLink', $dealLink)
		->orderBy('d.departureMonths');
	
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get dealLink status
	 *
	 * @param : $dealLink
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealLinkStatus($dealLink)
	{
		$deals = $this->getAllDealsByDealLink($dealLink);
		
		if(empty($deals)){
			return 'inactive';
		}
		
		foreach ($deals as $deal){
			if(!empty($deal->getStatus()) && $deal->getStatus() == 1){
				return 'active';
			}
		}
	
		return 'inactive';
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deals by dealLink for form
	 *
	 * @param : $dealLink
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealsByDealLinkForForm($dealLink)
	{
		$queryBuilder = $this->createQueryBuilder('d')
			->select('d')
			->where('d.dealLink = :dealLink')
			->setParameter(':dealLink', $dealLink)
			->groupBy("d.dealLink")
			->orderBy('d.id');
	
		return $queryBuilder->getQuery()->getOneOrNullResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deals by userid
	 *
	 * @param : $uerId
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealsByUserId($userId)
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d')
		->where('d.userId = :userId')
		->setParameter(':userId', $userId)
		->orderBy('d.createdAt', 'DESC');
	
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deal links by userid
	 *
	 * @param : $uerId
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealLinksByUserId($userId)
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d')
		->where('d.userId = :userId')
		->setParameter(':userId', $userId)
		->orderBy('d.createdAt', 'DESC')
		->groupBy('d.dealLink');
	
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get all deals
	 *
	 * @param : $uerId
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getAllDeals($userId='')
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d');
		
		if($userId){
			$queryBuilder = $queryBuilder->where('d.userId = :userId')
				->setParameter(':userId', $userId);
		}
		$queryBuilder = $queryBuilder->orderBy('d.createdAt', 'DESC');
	
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get all deal links
	 *
	 * @param : $uerId
	 *
	 * @return: Array of Deal links
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getAllDealLinks($userId='')
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d');
	
		if($userId){
			$queryBuilder = $queryBuilder->where('d.userId = :userId')
			->setParameter(':userId', $userId);
		}
		$queryBuilder = $queryBuilder
			->orderBy('d.createdAt', 'DESC')
			->groupBy('d.dealLink');
	
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deals by criterias
	 *
	 * @param : Array $criteria
	 *
	 * @return: Array of Deals
	 *
	 * @throws Exception: Null
	 *
	 */
	public function getDealsByCriteria($criteria = array())
	{
		$queryBuilder = $this->createQueryBuilder('d')
		->select('d');
		
		if(!empty($criteria['dealLink'])){
			$queryBuilder->where('d.dealLink = :dealLink')
			->setParameter(':dealLink', $criteria['dealLink']);
		}
		
		if(!empty($criteria['noOfNights'])){
			$queryBuilder->andWhere('d.noOfNights = :noOfNights')
			->setParameter(':noOfNights', $criteria['noOfNights']);
		}
		
		if(!empty($criteria['departureAirport'])){
			$queryBuilder->andWhere('d.departureAirport = :departureAirport')
			->setParameter(':departureAirport', $criteria['departureAirport']);
		}
		
		if(!empty($criteria['departureMonth'])){ // && count($criteria['departureMonth']) > 0){
			//$queryBuilder->andWhere('d.departureMonths = :departureMonths')
			//->setParameter(':departureMonths', $criteria['departureMonth']);
			//$queryBuilder->andWhere('d.departureMonths IN (:departureMonths)')
			//->setParameter(':departureMonths', $criteria['departureMonth']);
			
			$selectedMonthYear = $criteria['departureMonth'];
			
			$my = new \DateTime();
			$monthYearObject = $my->createFromFormat ('Y-m' , $criteria['departureMonth']);
			
			$nextMonthYear = $monthYearObject->modify('+1 month')->format('Y-m');
			
			$queryBuilder->andWhere('d.departureMonths = :selectedMonthYear OR d.departureMonths = :nextMonthYear')
			->setParameter(':selectedMonthYear', $selectedMonthYear)
			->setParameter(':nextMonthYear', $nextMonthYear);
		}
		
		if(!empty($criteria['extras'])){
			$queryBuilder->andWhere('d.extras = :extras')
			->setParameter(':extras', $criteria['extras']);
		}
		
		$queryBuilder->orderBy('d.departureMonths');
		
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get deal by id
	 *
	 * @param 1 : $id
	 *
	 * @return : deal
	 *
	 * @throws Exception: Null
	 *
	 **/
	public function getDealById($id)
	{
		$queryBuilder = $this->createQueryBuilder('d');
	
		$queryBuilder = $queryBuilder
		->where('d.id = :id')
		->setParameter(':id', $id);
	
		return $queryBuilder->getQuery()->getOneOrNullResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get merchant names for filter
	 *
	 *
	 * @return : merchant names
	 *
	 * @throws Exception: Null
	 *
	 **/
	public function getMerchantNameForFilter(){
		$queryBuilder = $this->createQueryBuilder('d');
		
		$queryBuilder = $queryBuilder
		->select('u.id as userId', 'u.fullName as userFullName')
		->innerJoin('IATBundle:User','u', 'With', 'd.userId=u.id')
		->Where("u.type = :type")
		->setParameter(':type', 'merchant')
		->groupBy("u.id")
		->orderBy('u.id');
		return $queryBuilder->getQuery()->getResult();
	}
	
	/**
	 * @author Ashish Shah (ashish414@gmail.com)
	 *
	 * Description : This function is used to get merchant deal for filter
	 *
	 *
	 * @return : merchant deals
	 *
	 * @throws Exception: Null
	 *
	 **/
	public function getMerchantDealForFilter(){
		$queryBuilder = $this->createQueryBuilder('d');
	
		$queryBuilder = $queryBuilder
		->select('d.id as userId, d.dealLink as dealLink');
		return $queryBuilder->getQuery()->getResult();
	}
}
